
ometa wp {
   picture = "picture",
   name = string:n -> (alert("name:"+n)),
   stmts = string
}

// this works because its matching a stringorArrayLikeObject ie a string of letters with a rule
wp.matchAll('picture','picture')
// this still works because its matching an object (String) with a rule, and the defn of picture still is ok
//wp.match('picture ','name');
// this returns only the first char as matched with name because matchAll works on an array of chars, and each char is still a valid string
//wp.matchAll('blah','name');
// this returns the whole string because match works on an object, ie the entire string of chars
wp.match('blah','name');

moral of the story: use matchAll to parse into tokens, then use match to parse the tokenized stream (or graph of objects)

tbd: determine which functions in parser.js works on string and which on objects.

other tips:
- when a change breaks a working grammar, try running one of the lower level rules instead of the root one. Ometa's "Oops, match failed" is not a useful enough tool.
- define a text or string rule and use that as the start of your grammar exploration. let this be your default RHS for any rule and refine from there.
  - pitfall: string works on strings of objects, and treats all javascript strings as arrays of char objects. so define a string rule of your own that will work with matchall.
- although the docs dont show it, the ? operator is supported. as is the OMeta idiom of (optchoice | empty). ref: http://vpri.org/pipermail/ometa/2010-June/000297.html
- this must be PEGs 101, but killed my buzz for 2 hrs: having "north" and "n" in that order didnt work; and I couldnt figure it out for a while. moral: when using ordered choice make sure the greedier option is first so its abscence can be easily identified
