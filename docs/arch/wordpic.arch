to-build: &wordpic
    name: wordpic - a graphviz-style tool for diagramming.
    version: 1.0
    with-features:
        - &f1 ability to describe pictures/diagrams in a near-graphviz style 
        - &f2 abilty to render the picture/diagram in various formats
        - &f3 specifically, the ability to output in "enriched source" format a la Graphviz
        - &f4 ability to render on an html5 canvas
    and-capabilities:
        - &nf1 to run as a command line tool similar to dot
        - &nf2 to run online from within a browser
        - &nf3 to run from a nodejs server
    
    requires:
        defining:
            - the relation between the logical and physical spaces - DONE; logical syntax will support a size attr that defines the size of the output space in unitless numbers, but which are in 1-1 correspondence with the physical coord system, and a spread param which is a row x col spec for the number of "pages" the output should be spread into.
            - the declarative input syntax - PARTIALLY DONE
            - the imperative output syntax - PARTIALLY DONE
            - the interaction between logical and physical primitives - DONE; logical primitives will support attributes required to phsycially draw it and params required to logically place it.
            - batch vs stream mode of processing the rendering pipeline - DONE; decided to support both.
            - how to do this incrementally (if possible) - DONE; using callbacks
        building:
            - parser: a parser to read the input file and convert to a json AST - OMETAJS PROTOTYPE DONE
            - logical_renderer: to process the AST and convert it into a logical grid of objects 
            - physical_renderer: to process the logical grid and convert them into physically drawn objects
            - commandlinewrapper: to wrap the above components such that they're callable from the command line
            - nodejswrapper: to wrap the above components such that they're calllable as a nodejs service
            - webwrapper: to wrap the above components such that they're calllable from a web page
            - callbacks: each step in the pipeline will allow the previous step to act on intermediate results as soon as a "unit" of output has been created via these. 
        using:
            - os: any
            - language: javascript
    realizing-architecture:
            - commandlinewrapper calls physical_renderer
            - nodejswrapper calls physical_renderer
            - webwrapper calls physical_renderer
            - physical_renderer calls parser
            - parser calls logical_processor
            - logical_processor calls physical_processor
            - physical_renderer_callback iscalledby parser_callback
            - parser_callback iscalledby logical_processor_callback
            - logical_processor_callback iscalledby physical_processor_callback 
    
    to-build:
      - logical_processor:
          requires:
            defining:
              - a pipeline of tasks to create the objects, place them per the rules and render them on the canvas - DONE
            building:
              - object_creation: a step that creates the basic objects
              - placement: a step that places the objects as per the relations given on the logical space
              - render: a step that renders objects onto a logical space that uses unitless numbers and has 1-1 correspondence with the output Coord System. Outputs a wordpic document with the physical syntax.
              - callbacks: each step in the pipeline will allow the previous step to act on intermediate results as soon as a "unit" of output has been created via these. 
            realizing-architecture:
              - object_creation leads_to placement
              - placement leads_to render
              - object_creation calls callback
              - object_creation calls callbacks
              - placement calls callbacks
              - render calls callbacks
