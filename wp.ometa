// see hard-earned-gyaan.txt for all the work that went into getting this to work.

ometa WordpicScanner {
  wordpic = "picture" name:n "{" statements:s "}" -> [`wordpic,n,s],
  name = text,
  statements = statement+:s -> s,

  statement = objdef | simple_statement,
  objdef = "object" name:name "{" objdefbody:body "}" -> [`objectdef,name,body],
  simple_statement = obj_decln | rel_decln,

  objdefbody = simple_statement+,

  // docs dont talk about the ? operator, mail archive does: http://vpri.org/pipermail/ometa/2010-April/000242.html
  obj_decln = (name:name ":")? objtype:typ attrs?:attrs-> [`object, typ, name, [`attrs, attrs]],
  rel_decln = name:opd1 opr:op name:opd2 -> [op, opd1, opd2],
  
  objtype = "box" | "square" | "rect" | "circle" | "oval" | "arc" | "image" | "point" | "link" | "line" | nqstring,
  attrs = "[" listOf('nvpair',","):a "]" -> a,

  opr = ">" | "<",
  nvpair = nqstring:name "=" text:value -> [`attr,name, value],

  text = spaces (qstring | nqstring):s ->s,
  
  //this takes care of comments too. copied from bs-ometa-compiler.txt
  space = ^space |fromTo('//','\n') | fromTo('/*','*/'), 
  
  qstring = fromTo('"','"'),
  nqstring = ('_' | '.' | letterOrDigit)+:ls -> (ls.join(''))
}
/*
WordpicScanner.matchAll("picture bleh {
object blah {
ab:box [attrs] // a comment
xy:circle
k > m
}
}",'wordpic');
*/
WordpicScanner.matchAll('ab:box [attrs]','simple_statement');
//WordpicScanner.matchAll('ab:box','simple_statement');
//WordpicScanner.matchAll('ab > cd','simple_statement');

// added handy debugging tool from here:http://vpri.org/pipermail/ometa/2010-May/000281.html
// the sample below can currently be broken by adding a non-letter, non-digit char to any text to see this in action.

matchFailed = function (grammar, errorPos) {
  var lines = grammar.input.lst.split('\n');
  var pos = 0, l = 0;
  var msg = ["Execution error: input matching failed at position: " + errorPos];

  while (pos < errorPos) {
    var line = lines[l], length = line.length;
    if (pos + length >= errorPos) {
      var c = errorPos - pos;
      msg.push("  line:" + (l + 1) + ", column:" + c);
      msg.push(line)
      // replicate str n times
      function replicate(str, n) {
        if (n < 1) return "";
        var t = [];
        for (var i=0; i<n; i++) t.push(str);
        return t.join('');
      }
      msg.push(replicate('-', c) + '^');
    }
    pos += length + 1;
    l++;
  }
  alert(msg.join('\n'));
}


WordpicScanner.matchAll("picture \"Three tier arch\" {
          // todo: think of a better name than object. this is the exemplar object that you instantiate for your picture.
          object cylinder{
            bot:arc
            top:oval  
        
            top > bot
            
            lt:line[from=top.e,to=bot.e]
            rt:line[from=top.w,to=bot.w]
          }
          
          client:box[color=green] //default label is the name.
          server:box[color=blue]
          db:cylinder[color=red]
          
          l1:link[from=client,to=server]
          link[from=server,to=db]
          // also can be written as
          // client -- server -- db
        }",'wordpic',[],matchFailed);
