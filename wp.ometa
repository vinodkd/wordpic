/*
ometa Wordpic {
   identifier = <string>,
   text = <string>,
   objname = identifier,
   instname = identifier,
   opr = ">" | "<",
   multicomment = "/*" text "\n"+ "*/",
   linecomment = "//" text "\n",
   comment = linecomment | multicomment,
   relation = instname opr instname [comment],
   objinst = instname ":" objname [comment]"\n",
   objdefbody = simplestatement*,
   simplestatement = objinst | relation | comment,
   objdef = "object" objname "{" objdefbody "}",
   statement = objdef | simplestatment,
   picbody = statement*,
   picture = "picture" picname:pn "{" picbody "}"

}

Wordpic.match('/* test
blah */','multicomment');

*/

// this works. see hard-earned-gyaan.txt

ometa WordpicScanner {
/**/
  wordpic = "picture" name:n "{" statements:s "}" -> [`wordpic,n,s],
  name = text,
  statements = statement+:s -> s,

  statement = objdef | simple_statement,
  objdef = "object" name:name "{" objdefbody:body "}" -> [`objectdef,name,body],
  simple_statement = object | relation,

  objdefbody = simple_statement+,
  object = unnamed_obj | named_obj,
  unnamed_obj = objtype:type -> [`objinst,type,"unnamed"],
  named_obj = name:oname ":" objtype:otype -> [`objinst, otype, oname],
  objtype = "box" | "circle",
  relation = text:r -> [`relation,r],
  //relation = name:o1 opr:op name:o2 -> [op,o1,o2],

  //opr = (">" | "<"):op -> (op),

  text = spaces (qstring | nqstring):s ->s,
  space = ^space |fromTo('//','\n') | fromTo('/*','*/'), //this takes care of comments too. copied from bs-ometa-compiler.txt
  qstring = fromTo('"','"'),
  nqstring = letter+:ls -> (ls.join(''))
}

// WordpicScanner.matchAll('abcd','text');
// WordpicScanner.matchAll('abcd','statements');
// WordpicScanner.matchAll('abcd','name');

WordpicScanner.matchAll('picture "abc def" { 


object blah {
  foo : box //test comment 
  circle
  bleh
  /* another comment
   that spans lines
  */
} 
bleh 
}','wordpic');
/*
WordpicScanner.matchAll('picture Box1 {
  box[label="A box"]
}
','wordpic');
*/