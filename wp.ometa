// see hard-earned-gyaan.txt for all the work that went into getting this to work.

ometa WordpicScanner {
  wordpic = "picture" name:n "{" statements:s "}" -> [`wordpic,n,s],
  name = text,
  statements = statement+:s -> s,

  statement = objdef | simple_statement,
  objdef = "object" name:name "{" objdefbody:body "}" -> [`objectdef,name,body],
  simple_statement = obj_decln | rel_decln,

  objdefbody = simple_statement+,

  // docs dont talk about the ? operator, mail archive does: http://vpri.org/pipermail/ometa/2010-April/000242.html
  obj_decln = name:obj ":" objtype:typ attrs?:attrs-> [`object, obj, typ, [`attrs, attrs]],
  rel_decln = name:opd1 opr:op name:opd2 -> [op, opd1, opd2],
  
  objtype = "box" | "circle",
  attrs = "[" listOf('nvpair',","):a "]" -> a,

  opr = ">" | "<",
  nvpair = nqstring:name "=" text:value -> [`attr,name, value],

  text = spaces (qstring | nqstring):s ->s,
  
  //this takes care of comments too. copied from bs-ometa-compiler.txt
  space = ^space |fromTo('//','\n') | fromTo('/*','*/'), 
  
  qstring = fromTo('"','"'),
  nqstring = letterOrDigit+:ls -> (ls.join(''))
}
/*
WordpicScanner.matchAll("picture bleh {
object blah {
ab:box [attrs] // a comment
xy:circle
k > m
}
}",'wordpic');
*/
WordpicScanner.matchAll('ab:box [attrs]','simple_statement');
//WordpicScanner.matchAll('ab:box','simple_statement');
//WordpicScanner.matchAll('ab > cd','simple_statement');

WordpicScanner.matchAll("picture abc {
object blah {
  foo : box //test comment 
  c1 : circle [attr1=foo,attr2=bar] 
  bleh > foo
  /* another comment
   that spans lines
  */
} 
}",'wordpic');
