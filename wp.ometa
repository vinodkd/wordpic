// see hard-earned-gyaan.txt for all the work that went into getting this to work.

ometa WordpicScanner {
  wordpic = ("picture" | "diagram") name:n "{" statements:s "}"         -> [`wordpic,n,s],
  name = text,
  statements = statement+,

  statement = shape | simple_statement,
  shape = ("object" | "shape" | "symbol") name:name "{" body:body "}"     -> [`shape,name,body],
  simple_statement = instance | relation,

  body = simple_statement+,

  // docs dont talk about the ? operator, mail archive does: http://vpri.org/pipermail/ometa/2010-April/000242.html
  instance = (name:n ":")? type:typ attrs?:attrs      -> [`instance, typ, n, [`attrs, attrs]],
  relation = name:opd1 opr:op name:opd2               -> [op, opd1, opd2],
  
  type =  "box"     | "square"  | "rect" 
        | "circle"  | "oval"    | "arc"   | "line" 
        | "image" 
        | "point"   | "link"    | 
          nqstring,
  attrs = "[" listOf('nvpair',","):attrs "]"              -> attrs,

  opr = "is"? ("above" | "below" | "left" | "right"
         // order very imp here. north will not be recognized if placed after n.
         // |||ly south and s, southwest and south and sw and s
        
         | "northeast" | "northwest" | "southwest" | "southeast" 
         | "north"  | "south" | "east" | "west" 
         | "nw" | "ne" | "se" | "sw"
         | "n" | "s" | "e" | "w"  
         |">" | "<" | "smaller" | "bigger"
         |">>" | "<<" | "much smaller" | "much bigger"
        ):op  ("of" | "to" | "than")?                     -> op,
  nvpair = nqstring:name "=" text:value                   -> [`attr,name, value],

  text = spaces (qstring | nqstring):s                    ->s,
  
  //this takes care of comments too. copied from bs-ometa-compiler.txt
  space = ^space |fromTo('//','\n') | fromTo('/*','*/'), 
  
  qstring = fromTo('"','"'),
  nqstring = ('_' | '.' | letterOrDigit)+:ls              -> (ls.join(''))
}
/*
WordpicScanner.matchAll("picture bleh {
object blah {
ab:box [attrs] // a comment
xy:circle
k > m
}
}",'wordpic');
*/
WordpicScanner.matchAll('ab:box [attrs]','simple_statement');
//WordpicScanner.matchAll('ab:box','simple_statement');
//WordpicScanner.matchAll('ab > cd','simple_statement');

// added handy debugging tool from here:http://vpri.org/pipermail/ometa/2010-May/000281.html
// the sample below can currently be broken by adding a non-letter, non-digit char to any text to see this in action.

matchFailed = function (grammar, errorPos) {
  var lines = grammar.input.lst.split('\n');
  var pos = 0, l = 0;
  var msg = ["Execution error: input matching failed at position: " + errorPos];

  while (pos < errorPos) {
    var line = lines[l], length = line.length;
    if (pos + length >= errorPos) {
      var c = errorPos - pos;
      msg.push("  line:" + (l + 1) + ", column:" + c);
      msg.push(line)
      // replicate str n times
      function replicate(str, n) {
        if (n < 1) return "";
        var t = [];
        for (var i=0; i<n; i++) t.push(str);
        return t.join('');
      }
      msg.push(replicate('-', c) + '^');
    }
    pos += length + 1;
    l++;
  }
  alert(msg.join('\n'));
}


WordpicScanner.matchAll("picture \"Three tier arch\" {
          // todo: think of a better name than object. this is the exemplar object that you instantiate for your picture.
          object cylinder{
            bot:arc
            top:oval  
                    
            lt:line[from=top.e,to=bot.e]
            rt:line[from=top.w,to=bot.w]
          }
          
          client:box[color=green] //default label is the name.
          server:box[color=blue]
          db:cylinder[color=red]
          
          l1:link[from=client,to=server]
          link[from=server,to=db]
          // also can be written as
          // client -- server -- db
        }",'wordpic',[],matchFailed);

WordpicScanner.matchAll("picture \"Positioning Test\" {
            x > y
            x bigger y
            x is bigger than y
            x is much bigger than y
            x bigger than y
            x much bigger y
            
            x is north of y
            x is north y
            x north y
            x is south of y
            x is west of y
            x is east of y
            x is northwest of y
            x is northeast of y
            x is southwest of y
            x is southeast of y
            x n y
            x s y
            x e y
            x w y
            x ne y
            x nw y
            x se y
            x sw y
        }",'wordpic',[],matchFailed);

// testing out diagram, shape and symbol keywords
WordpicScanner.matchAll("diagram \"Three tier arch\" {
          shape cylinder{
            bot:arc
            top:oval  
                    
            lt:line[from=top.e,to=bot.e]
            rt:line[from=top.w,to=bot.w]
          }
          
          symbol cylinder{
            bot:arc
            top:oval  
                    
            lt:line[from=top.e,to=bot.e]
            rt:line[from=top.w,to=bot.w]
          }
          
          client:box[color=green] //default label is the name.
          server:box[color=blue]
          db:cylinder[color=red]
          
          l1:link[from=client,to=server]
          link[from=server,to=db]
          // also can be written as
          // client -- server -- db
        }",'wordpic',[],matchFailed);
